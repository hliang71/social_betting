package com.openbet.socailbetting.executor;

import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

import com.openbet.socailbetting.exception.RuleEngineException;
import com.openbet.socailbetting.executor.listener.OpponentSearchExpireLisener;
import com.openbet.socailbetting.model.BettingEvent;
import com.openbet.socailbetting.utils.BetTypeEnum;
import com.openbet.socailbetting.utils.ErrCode;
import com.openbet.socailbetting.utils.ExpiringMap;
import com.openbet.socailbetting.utils.TimerStatusEnum;
import com.openbet.socailbetting.webapp.OpponentExpireVO;

public class DefaultStartOpponentTimerCommand  extends BaseRuleExecutor{
	private static final Logger log = Logger.getLogger(DefaultStartOpponentTimerCommand.class);
		
	private static final int FACTOR = 10;
	
	private OpponentSearchExpireLisener opponentListener;
	
	private Map<Integer, ExpiringMap<String, OpponentExpireVO>> timers = new ConcurrentHashMap<Integer, ExpiringMap<String, OpponentExpireVO>>();
	
	public ExpiringMap<String, OpponentExpireVO> getTimer(Integer timeToLive) {
		return timers.get(timeToLive);
	}



	public void setTimer(Integer timeToLive, ExpiringMap<String, OpponentExpireVO> timer) {
		this.timers.put(timeToLive, timer);
	}



	@Override
	public BettingEvent execute(BettingEvent event, Object parameters) {
		log.info("IN start opponent timer");
		TimerStatusEnum status = event.getTimerStatus();
		if(status != TimerStatusEnum.OPPONENT_TIMER_STARTED)
		{
			Integer maxTimeFindOpponent = (Integer)this.getValue();
			
			if(maxTimeFindOpponent == null || maxTimeFindOpponent <= 0)
			{
				throw new RuleEngineException(ErrCode.MAX_TIME_FIND_OPPONENT_UNDEFINE, "max time to find opponent is undefined in opponent rule");
			}
			ExpiringMap<String, OpponentExpireVO> timer = this.getTimer(maxTimeFindOpponent);
			if(timer == null)
			{
				timer = new ExpiringMap<String, OpponentExpireVO>(maxTimeFindOpponent, maxTimeFindOpponent/FACTOR);
				timer.addExpirationListener(opponentListener);
				timer.getExpirer().startExpiringIfNotStarted();
				this.setTimer(maxTimeFindOpponent, timer);
			}
			String id = event.getId();
			if(StringUtils.isBlank(id))
			{
				id = UUID.randomUUID().toString();
				event.setId(id);
			}
			Long projectId = event.getProjectId();
			BetTypeEnum betType = event.getBetType();
			OpponentExpireVO vo = new OpponentExpireVO();
			vo.setEventId(id);
			vo.setProjectId(projectId);
			vo.setBetType(betType);
			timer.put(id, vo);
			event.setTimerStatus(TimerStatusEnum.OPPONENT_TIMER_STARTED);
		}
		return event;
	}



	public OpponentSearchExpireLisener getOpponentListener() {
		return opponentListener;
	}



	public void setOpponentListener(OpponentSearchExpireLisener opponentListener) {
		this.opponentListener = opponentListener;
	}
	
	
}
