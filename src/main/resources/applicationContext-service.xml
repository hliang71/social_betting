<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:amq="http://activemq.apache.org/schema/core"
	   xmlns:jms="http://www.springframework.org/schema/jms"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
            http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-2.5.xsd
            http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd"
       default-lazy-init="true">
   
    <import resource="classpath:activemq.xml"/> 
    <!-- =================================================================== -->
    <!-- AOP: Configuration and Aspects                                      -->
    <!-- =================================================================== -->
   
   <aop:config>		
		<aop:aspect ref="sbSecurityAspect">
			<aop:pointcut id="login"
				expression="(execution(* com.openbet.socailbetting.service.impl.*ServiceImpl.*(..)))" />
		    <aop:around pointcut-ref="login" method="login" />
		</aop:aspect>
	</aop:config>
    
    <bean id="sbSecurityAspect" class="com.openbet.socailbetting.aop.SocialBettingSecurityInterceptor" >
    	<property name="ruleDao" ref="ruleDao" />
    </bean> 
    <!-- Enable @Transactional support -->
    <tx:annotation-driven/>

    <!-- Enable @AspectJ support -->
    <aop:aspectj-autoproxy/>

    <!-- Activates scanning of @Autowired -->
    <context:annotation-config/>

    <!-- Activates scanning of @Service -->
    <context:component-scan base-package="com.openbet.socailbetting.service"/>
    
	<bean id="amq.connectionFactory"
            class="org.apache.activemq.ActiveMQConnectionFactory" >
        <property name="brokerURL"
                value="vm://notification?jms.redeliveryPolicy.maximumRedeliveries=1&amp;create=false&amp;jms.prefetchPolicy.queuePrefetch=10" />
        <property name="userName" value="${activemq.username}"/>  
        <property name="password" value="${activemq.password}"/> 
    </bean>
	<bean id="jmsCachingconnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
	    <constructor-arg ref="amq.connectionFactory" />
	    <property name="exceptionListener" ref="jmsExceptionListener" />
	    <property name="sessionCacheSize" value="10" />
	    
	</bean>
	<bean id="jms_Factory" class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop">
	    <property name="connectionFactory">
	      	<bean class="org.apache.activemq.ActiveMQConnectionFactory">
	        	<property name="brokerURL">
	          		<value>vm://notification?jms.redeliveryPolicy.maximumRedeliveries=1&amp;create=false&amp;jms.prefetchPolicy.queuePrefetch=1000&amp;waitForStart=4000</value>
	        	</property>
	        	<property name="userName" value="${activemq.username}"/>  
        		<property name="password" value="${activemq.password}"/> 
        		<property name="alwaysSyncSend" value="true"/> 
        		<property name="sendTimeout" value="2000"/>
	      	</bean>
	    </property>
	    <property name="maxConnections" value="20" />
	    <property name="maximumActive" value="300" />
	</bean>
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
	   	<property name="connectionFactory">
	      <ref local="jms_Factory"/>
	    </property>
	   	<property name="sessionTransacted" value="true" />
	   	<property name="explicitQosEnabled" value="true" />
        <property name="deliveryPersistent" value="true" />
        <property name="timeToLive" value="259200" /> 
	</bean>
	
	<bean id="jmsHistoryContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
	    <property name="connectionFactory" ref="jms_Factory" />
	   	<property name="concurrency" value="100" />
	    
	    <property name="destinationName" value="${history.queue.name}" />
	    <property name="messageListener" ref="historyQueueListener" />
	    <!-- change the transaction manager reference -->
	    <property name="transactionManager" ref="transactionManager" />
	    <property name="sessionTransacted" value="true" />
	</bean>
	<bean id="jmsCallbackContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
	    <property name="connectionFactory" ref="jms_Factory" />
	    <property name="concurrency" value="100" /><!-- set it to 1 is order is a matter -->
	    <property name="destinationName" value="${callback.queue.name}" />
	    <property name="messageListener" ref="callbackQueueListener" />
	    <!-- change the transaction manager reference -->
	    <property name="transactionManager" ref="transactionManager" />
	    <property name="sessionTransacted" value="true" />
	</bean>
	<bean id="jmsEventContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
	    <property name="connectionFactory" ref="jms_Factory" />
	    <property name="concurrency" value="10" />
	    <property name="destinationName" value="${event.queue.name}" />
	    <property name="messageListener" ref="eventQueueListener" />
	    <!-- change the transaction manager reference -->
	    <property name="transactionManager" ref="transactionManager" />
	    <property name="sessionTransacted" value="true" />
	</bean>
	<bean id="jmsExceptionListener" class="com.openbet.socailbetting.service.impl.JmsExceptionListener">
	    <property name="cachingConnectionFactory" ref="jmsCachingconnectionFactory"   /> 
	</bean>
	
	<bean id="transactionManager" class="org.springframework.jms.connection.JmsTransactionManager">
       <property name="connectionFactory" ref="jms_Factory" />
    </bean>
    <bean id="bettingMessageProducer" class="com.openbet.socailbetting.service.impl.BettingMessageProducerImpl">
       <property name="eventQueue" value="${event.queue.name}" />
        <property name="historyQueue" value="${history.queue.name}" />
         <property name="callbackQueue" value="${callback.queue.name}" />
    </bean>
    
    <bean id="brokerQuery" class="org.apache.activemq.web.LocalBrokerFacade" autowire="constructor" scope="prototype">

 	</bean>
 	
 	
    <bean id="processDLQTask" class="com.openbet.socailbetting.cron.job.ProcessDLQTaskImpl" >
	
	</bean>  
    
    <bean id="crmClient" class="com.openbet.socailbetting.service.impl.RestCRMClient">
        <property name="restTemplate" ref="restTemplate"/>
    </bean>
    
    <bean id="httpClientParams" class="org.apache.commons.httpclient.params.HttpClientParams">
        <!-- <property name="authenticationPreemptive" value="true"/> -->
        <!--  <property name="connectionManagerClass"
                  value="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"/>-->
        <property name="soTimeout" value="10000" />
        <property name="connectionManagerTimeout" value="3000" />
    </bean>
    <bean id="multiThreadConnectionManager" class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager">
            <property name="maxConnectionsPerHost" value="1000"/>
            <property name="maxTotalConnections" value="2000"/>
            <property name="params" ref="httpConnectionManagerParams"/>
    </bean>
    
    
    <bean id="httpConnectionManagerParams" class="org.apache.commons.httpclient.params.HttpConnectionManagerParams">
        <!-- <property name="authenticationPreemptive" value="true"/> -->
        <!--  <property name="connectionManagerClass"
                  value="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"/>-->
        <property name="ConnectionTimeout" value="8000" />
    </bean>
    
    <bean id="httpClient" class="org.apache.commons.httpclient.HttpClient">
        <constructor-arg index="0" ref="httpClientParams"/>
        <constructor-arg index="1" ref="multiThreadConnectionManager"/>
    </bean>
   <!--  <bean id="credentials" class="org.apache.commons.httpclient.UsernamePasswordCredentials">
        <constructor-arg value="username"/>
        <constructor-arg value="password"/>
    </bean> -->
    <bean id="httpClientFactory" class="org.springframework.http.client.CommonsClientHttpRequestFactory">
        <constructor-arg ref="httpClient"/>
    </bean>
 
    <bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
        <constructor-arg ref="httpClientFactory"/>
        <property name="messageConverters">
            <list>
            	<bean id="jsonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
				    <property name="prefixJson" value="false"/>
				    <property name="supportedMediaTypes" value="application/json"/>
				</bean>
				<bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
                    <property name="marshaller" ref="jaxbMarshaller"/>
                    <property name="unmarshaller" ref="jaxbMarshaller"/>
                </bean>
                <bean class="org.springframework.http.converter.FormHttpMessageConverter" />
				<bean class="org.springframework.http.converter.StringHttpMessageConverter" />
            </list>
        </property>
    </bean>
    <bean id="jaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="classesToBeBound">
            <list>
                <value>com.openbet.socailbetting.model.CustomizerType</value>
                <value>com.openbet.socailbetting.model.ContentType</value>
                <value>com.openbet.socailbetting.model.TierType</value>
            </list>
        </property>
    </bean>
    
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
    	p:host-name="${redis_host}" p:port="9999" p:password="${redis.password}" />
 
	 <!-- redis template 10.5.5.159, 10.112.9.49-->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
	    p:connection-factory-ref="connectionFactory" />
	
	
	<bean name="processDLQJob" class="org.springframework.scheduling.quartz.JobDetailBean">
	  <property name="jobClass" value="com.openbet.socailbetting.cron.job.ProcessDLQJob" />
	  
	  <property name="jobDataAsMap">
	    <map>
	      <entry key="task" value-ref="processDLQTask" />
	      <entry key="lockFacade" value-ref="dbLockFacade" />
	      <entry key="historyQueue" value="${history.queue.name}" />
	      <entry key="historyDLQ" value="${deadletter.history.queue.name}" />
	      <entry key="callbackQueue" value="${callback.queue.name}" />
	      <entry key="callbackDLQ" value="${deadletter.callback.queue.name}" />
	    </map>
	  </property>	  
	</bean>	
	<bean id="processDLQTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
	    <property name="jobDetail" ref="processDLQJob" />
	    <property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_DO_NOTHING" />
	    <!-- run every morning at 6 AM 0 0/1 * ? * *  0 0 6 * * ?-->
	    <property name="cronExpression" value="0/4 * * ? * *" /> 
	   <!--  <property name="cronExpression" value="0 0 6 * * ?" /> -->
	</bean>
	
	<bean id="updateShardTask" class="com.openbet.socailbetting.cron.job.UpdateShardTaskImpl" >
		<property name="ruleDao" ref="ruleDao"/>
	</bean>   
	<bean name="updateShardJob" class="org.springframework.scheduling.quartz.JobDetailBean">
	  <property name="jobClass" value="com.openbet.socailbetting.cron.job.UpdateShardJob" />
	  
	  <property name="jobDataAsMap">
	    <map>
	      <entry key="task" value-ref="updateShardTask" />
	      <entry key="lockFacade" value-ref="dbLockFacade" />
	      <entry key="totalBucket" value="2" />
	    </map>
	  </property>	  
	</bean>	
	<bean id="updateShardTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
	    <property name="jobDetail" ref="updateShardJob" />
	    <property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_DO_NOTHING" />
	    <!-- run every morning at 6 AM 0 0/1 * ? * *  0 0 6 * * ?-->
	    <property name="cronExpression" value="0 0/30 * ? * *" /> 
	   <!--  <property name="cronExpression" value="0 0 6 * * ?" /> -->
	</bean>
	    
	<bean id="runCallbackTask" class="com.openbet.socailbetting.cron.job.BetNotificationTask" >
		<property name="ruleDao" ref="ruleDao"/>
	</bean>   
	<bean name="betNotificationJob0" class="org.springframework.scheduling.quartz.JobDetailBean">
	  <property name="jobClass" value="com.openbet.socailbetting.cron.job.BetNotificationJob" />
	  
	  <property name="jobDataAsMap">
	    <map>
	      <entry key="task" value-ref="runCallbackTask" />
	      <entry key="lockFacade" value-ref="dbLockFacade" />
	      <entry key="batchSize" value="300" />
	      <entry key="threadPoolSize" value="100" />
	      <entry key="shardNumber" value="0" />
	    </map>
	  </property>	  
	</bean>	
	<bean name="betNotificationJob1" class="org.springframework.scheduling.quartz.JobDetailBean">
	  <property name="jobClass" value="com.openbet.socailbetting.cron.job.BetNotificationJob" />
	  
	  <property name="jobDataAsMap">
	    <map>
	      <entry key="task" value-ref="runCallbackTask" />
	      <entry key="lockFacade" value-ref="dbLockFacade" />
	      <entry key="batchSize" value="300" />
	      <entry key="threadPoolSize" value="100" />
	      <entry key="shardNumber" value="1" />
	    </map>
	  </property>	  
	</bean>	
	<bean id="cronCallbackTrigger0" class="org.springframework.scheduling.quartz.CronTriggerBean">
	    <property name="jobDetail" ref="betNotificationJob0" />
	    <property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_DO_NOTHING" />
	    <!-- run every morning at 6 AM 0 0/1 * ? * *  0 0 6 * * ?-->
	    <property name="cronExpression" value="0/4 * * ? * *" /> 
	   <!--  <property name="cronExpression" value="0 0 6 * * ?" /> -->
	</bean>
	<bean id="cronCallbackTrigger1" class="org.springframework.scheduling.quartz.CronTriggerBean">
	    <property name="jobDetail" ref="betNotificationJob1" />
	    <property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_DO_NOTHING" />
	    <!-- run every morning at 6 AM 0 0/1 * ? * *  0 0 6 * * ?-->
	    <property name="cronExpression" value="0/4 * * ? * *" /> 
	   <!--  <property name="cronExpression" value="0 0 6 * * ?" /> -->
	</bean>
	
	
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="configLocation" value="classpath:socialBettingQuartz.properties"/>
	    <property name="triggers">
	        <list>
	            <!-- <ref bean="cronCallbackTrigger0" /> 
	            <ref bean="cronCallbackTrigger1" /> 
	            <ref bean="updateShardTrigger" />    --> 
	            <ref bean="processDLQTrigger" />    
	        </list>
	    </property>   
	    <property name="schedulerListeners">
	        <list>
	           <!--   <ref bean="callbackSchedulerListener" /> -->
	           <!--   <ref bean="updateSchedulerListener" /> -->
	            <ref bean="processDLQSchedulerListener" />
	        </list>
	    </property> 
	</bean>
	<bean id="processDLQSchedulerListener" class="com.openbet.socailbetting.cron.NotificationJobSchedulerListener">
		<property name="clazName" value="com.openbet.socailbetting.cron.job.ProcessDLQJob" />
		<property name="lockFacade" ref="dbLockFacade" />
	</bean> 
	<bean id="callbackSchedulerListener" class="com.openbet.socailbetting.cron.NotificationJobSchedulerListener">
		<property name="clazName" value="com.openbet.socailbetting.cron.job.BetNotificationJob" />
		<property name="lockFacade" ref="dbLockFacade" />
	</bean>    
	<bean id="updateSchedulerListener" class="com.openbet.socailbetting.cron.NotificationJobSchedulerListener">
		<property name="clazName" value="com.openbet.socailbetting.cron.job.UpdateShardJob" />
		<property name="lockFacade" ref="dbLockFacade" />
	</bean>   
	
	<bean id="dbLockFacade" class="com.openbet.socailbetting.cron.DBLockFacadeImpl" >
		<property name="ruleDao" ref="ruleDao"/>
	</bean> 
</beans>
